{
  "version": 3,
  "sources": ["../src/recorder.ts"],
  "sourcesContent": ["import { chromium } from \"@playwright/test\";\nimport fs from \"fs\";\nimport os from \"os\";\n\nimport {\n  removeFile,\n  waitForFileExists,\n  writeFile,\n  endpointOfUrl,\n  setHttpLogs,\n} from \"./utils\";\nimport { HAR, RecordRequest } from \"./models\";\n\nexport const readHarFile = (path: string, route: string): Promise<RecordRequest[]> => {\n  const host = route\n    .replace(\"https://\", \"\")\n    .replace(\"http://\", \"\")\n    .split(\"/\")[0];\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, data) => {\n      if (err) reject(err);\n      else {\n        const result: HAR = JSON.parse(data.toString());\n\n        const xgrRequests: RecordRequest[] = result.log.entries\n          .filter((e) => {\n            const url: string = e.request.url;\n\n            return (\n              !url.includes(host) &&\n              !/(.png)|(.jpeg)|(.webp)|(.jpg)|(.gif)|(.css)|(.js)|(.woff2)/.test(\n                url\n              ) &&\n              !/(image)|(font)|(javascript)|(css)|(html)|(text\\/plain)/.test(\n                e.response.content.mimeType\n              )\n            );\n          })\n          .map(({ request, response }) => {\n            const responseString = response.content.text\n              ? Buffer.from(response.content.text, \"base64\").toString()\n              : \"{}\";\n\n            return {\n              url: endpointOfUrl(request.url),\n              request,\n              requestData: JSON.parse(request?.postData?.text || \"{}\"),\n              response: JSON.parse(responseString),\n            };\n          });\n        resolve(xgrRequests);\n      }\n    });\n  });\n};\n\nexport const recordHar = async (\n  route: string,\n  filePath?: string,\n  logRecording = false\n): Promise<RecordRequest[]> => {\n  const harPath = filePath.replace(\".json\", \".temp.har\");\n\n  const browser = await chromium.launchPersistentContext(\n    `${os.tmpdir()}/chrome-user-data-dir`,\n    {\n      headless: false,\n      viewport: null,\n      recordHar: {\n        omitContent: false,\n        path: harPath,\n      },\n    }\n  );\n\n  const page = await browser.newPage();\n  await page.goto(route);\n\n  logRecording && setHttpLogs(page);\n\n  console.log(\"Recording requests\");\n\n  await page.pause();\n  await page.close();\n  await browser.close();\n\n  let requests = [];\n\n  try {\n    console.log(\"Processing recording...\");\n\n    await waitForFileExists(filePath);\n\n    requests = await readHarFile(harPath, route);\n    await writeFile(filePath, requests);\n\n    await removeFile(harPath);\n\n    console.log(\"Recording successfully saved!\");\n  } catch (e) {\n    console.error(e);\n\n    await removeFile(harPath);\n  }\n\n  return requests;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAyB;AACzB,gBAAe;AACf,gBAAe;AAEf,mBAMO;AAGA,MAAM,cAAc,CAAC,MAAc,UAA4C;AACpF,QAAM,OAAO,MACV,QAAQ,YAAY,IACpB,QAAQ,WAAW,IACnB,MAAM,KAAK;AAEd,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,sBAAG,SAAS,MAAM,CAAC,KAAK,SAAS;AAC/B,UAAI;AAAK,eAAO;AAAA,WACX;AACH,cAAM,SAAc,KAAK,MAAM,KAAK;AAEpC,cAAM,cAA+B,OAAO,IAAI,QAC7C,OAAO,CAAC,MAAM;AACb,gBAAM,MAAc,EAAE,QAAQ;AAE9B,iBACE,CAAC,IAAI,SAAS,SACd,CAAC,6DAA6D,KAC5D,QAEF,CAAC,yDAAyD,KACxD,EAAE,SAAS,QAAQ;AAAA,WAIxB,IAAI,CAAC,EAAE,SAAS,eAAe;AAvC1C;AAwCY,gBAAM,iBAAiB,SAAS,QAAQ,OACpC,OAAO,KAAK,SAAS,QAAQ,MAAM,UAAU,aAC7C;AAEJ,iBAAO;AAAA,YACL,KAAK,gCAAc,QAAQ;AAAA,YAC3B;AAAA,YACA,aAAa,KAAK,MAAM,0CAAS,aAAT,mBAAmB,SAAQ;AAAA,YACnD,UAAU,KAAK,MAAM;AAAA;AAAA;AAG3B,gBAAQ;AAAA;AAAA;AAAA;AAAA;AAMT,MAAM,YAAY,CACvB,OACA,UACA,eAAe,UACc;AAC7B,QAAM,UAAU,SAAS,QAAQ,SAAS;AAE1C,QAAM,UAAU,MAAM,qBAAS,wBAC7B,GAAG,kBAAG,iCACN;AAAA,IACE,UAAU;AAAA,IACV,UAAU;AAAA,IACV,WAAW;AAAA,MACT,aAAa;AAAA,MACb,MAAM;AAAA;AAAA;AAKZ,QAAM,OAAO,MAAM,QAAQ;AAC3B,QAAM,KAAK,KAAK;AAEhB,kBAAgB,8BAAY;AAE5B,UAAQ,IAAI;AAEZ,QAAM,KAAK;AACX,QAAM,KAAK;AACX,QAAM,QAAQ;AAEd,MAAI,WAAW;AAEf,MAAI;AACF,YAAQ,IAAI;AAEZ,UAAM,oCAAkB;AAExB,eAAW,MAAM,YAAY,SAAS;AACtC,UAAM,4BAAU,UAAU;AAE1B,UAAM,6BAAW;AAEjB,YAAQ,IAAI;AAAA,WACL,GAAP;AACA,YAAQ,MAAM;AAEd,UAAM,6BAAW;AAAA;AAGnB,SAAO;AAAA;",
  "names": []
}
